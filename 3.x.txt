A syntax error is an error that occurs when a written statement contradicts the grammatical syntax of the programming language (caught by compiler)

A semantic error is an error that is syntactically valid, but was not intended by the programmer

Debugging is the process of removing errors from a program

Five step process to appproach debugging
	1. Find the root cause (hardest)
	2. Understand the problem
	3. Determine a fix
	4. Repair the issue
	5. Retest

Static analysis tools are tools that analyze the program for semantic issues that may indicate problems with the program

Being able reproduuce is the first and most important step in debugging

Tactics to help find issues
	Commenting out code
	Using output statements to validate code flow
	Printing values

When using print statements, use std::cerr instead of std::cout (even better, avoid debugging via print statements)

A log file is a file that records events that occur in a program; logging is the process of writing information to log files

Refractoring is the process of restructuring the program without changing its behavior

Unit testing is a testing method by which small units of source code are tested to determine whether they are correct

Defernsive programming is a technique whereby the programmmer anticipates all of the user-end and developer's ways a program can be misused

The program state is all of the information tracked in a program (variable values, which functions have been called, the current point of execution)

A debugger is a tool that allows the programmer to control how a program executes and examines the program state while the program is running; an integrated debugger is a debugger that integrates into the code editor

Stepping is the name for a set of related debugging features that allows statement by statement execution

Step into executes the enxt statement in the normal execution path of the program, and then pauses execution; if the statement contains a function call, step into causes the program to jump to the top of the function being called

Step over executes the next statement in the normal execution path of the program, and then pauses execution; if the statement contains a function call, step over executes the function and returns control after execution

Run to cursor executes the program until execution reaches the statement selected by the mouse cursor

Continue runs the program, until the program terminates or a breakpoint is hit

Start is the same as continue, just from the beginning of the program

A breakpoint is a special marker that signals the debugger to stop execution of the program when the breakpoint is reached

Watching a variable alows the inspection of a variable's value while the program is executing in debug mode; the watch window allows the examinatino of the variable or expression's value

The call stack is a list of all the active functions that have been executed to get to the current point of execution; the call stack window is a debugger window that shows the call stack