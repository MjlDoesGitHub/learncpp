Finding Issues Before They Become Problems

Don't Make Errors
	Follow best practices
	Don’t program when tired
	Understand where the common pitfalls are in a language (all those things we warn you not to do)
	Keep your programs simple
	Don’t let your functions get too long
	Prefer using the standard library to writing your own code, when possible
	Comment your code liberally

Refractoring Functions
	Refractoring is the process of changing the structure of the program without changing its behavior
	Making behavioral and structural changes at the same time tends to lead to more errors (and ones that are harder to find)

An Introduction to Defensive Programming
	Defensive programming is a practice whereby the programmer tries to anticipate the misusage of a program, either by end-users, or by other developers using it

Finding Errors Fast
	A good approach to finding errors fast is to code the program a little bit at a time, and then test it to make sure it works

An Introduction to Testing Functions
	Unit testing is a program testing method by which small units of source code are tested to determine whether they are correct

An Introcuction to Constraints
	Constraint-based techniques involve the addition of some extra code to check if certain conditions are not violated (i.e. integers are non-negative); this ensures an error rather than producing an indeterminate result for error-catching
		One common method of doing this is via assert and static_assert

Shotgunning for General Issues
	Static analysis tools (informally called linters) are programs that analyze code to identify specific semantic issues (static = tools analyze the source code)
		The compiler is a static analysis tool which does light static analysis which identifies common problems (i.e. variable has not been initialized)
	Use a static analysis tool on programs to help find areas where code is non-compliant with best practices
	Visual Studio: Build > Run Code Analysis on Solution; Alt + F11 keyboard shortcut